services:
    db:
        image: postgres:15
        restart: always
        environment:
            - POSTGRES_USER=${DB_USERNAME}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=${DB_DATABASE}
        container_name: rural-postgres-db
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - "${DB_PORT}:5432"
        networks:
            - rural-net
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5

    backend:
        build:
            context: ./rural-producers-api
            dockerfile: Dockerfile.backend
        container_name: rural-backend
        environment:
            - PORT=${PORT}
            - DB_HOST=db
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASSWORD=${DB_PASSWORD}
            - DB_PORT=5432
            - DB_DATABASE=${DB_DATABASE}
        ports:
            - "${PORT}:${PORT}"
        depends_on:
            db:
                condition: service_healthy
        volumes:
            - ./rural-producers-api/src:/app/src
            - ./rural-producers-api/package.json:/app/package.json
            - ./rural-producers-api/package-lock.json:/app/package-lock.json
            - /app/node_modules
        networks:
            - rural-net
        command: npm run start:dev
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "wget --no-verbose --tries=1 --spider http://localhost:3000/healthcheck || exit 1",
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    frontend:
        build:
            context: ./rural-producers-frontend
            dockerfile: Dockerfile.frontend
            args:
                REACT_APP_API_URL: http://backend:${PORT}
        container_name: rural-frontend
        ports:
            - "${FRONTEND_PORT}:80"
        depends_on:
            - backend
        networks:
            - rural-net
        deploy:
            resources:
                limits:
                    memory: 4G
                reservations:
                    memory: 2G

networks:
    rural-net:
        driver: bridge

volumes:
    postgres_data:
