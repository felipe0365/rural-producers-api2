services:
  db:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    container_name: rural-postgres-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '${DB_PORT}:5432'
    networks:
      - rural-net
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: rural-backend
    environment:
      - PORT=${PORT}
      - DB_HOST=db
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
    ports:
      - '${PORT}:${PORT}'
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - /app/node_modules
    networks:
      - rural-net
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3000/healthcheck || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.frontend
      args:
        REACT_APP_API_URL: http://backend:${PORT}
    container_name: rural-frontend
    ports:
      - '${FRONTEND_PORT}:80'
    depends_on:
      - backend
    networks:
      - rural-net

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    container_name: rural-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - '${PGADMIN_HOST_PORT}:${PGADMIN_CONTAINER_PORT}'
    depends_on:
      - db
    networks:
      - rural-net
    volumes:
      - pgadmin_data:/var/lib/pgadmin

networks:
  rural-net:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
